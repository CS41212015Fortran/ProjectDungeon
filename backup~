!backup functions
! Set the name of the trap.
	subroutine setTrapName(this, new_trap_name)
		implicit none
		type(Trap), intent(in) :: this
		character (len=40) :: new_trap_name
		
		! Set the new trap name
		this%trap_name = new_trap_name
	end subroutine setTrapName
	
	! Return the name of the trap.
	function getTrapName(this) result (trap_name)
		implicit none
		type(Trap), intent(in) :: this
		character (len=40) :: trap_name
		
		! Return the name of the trap that was passed in
		trap_name = this%trap_name
	end function getTrapName
	
	! Set the type of the trap.
	subroutine setTrapType(this, new_trap_type)
		implicit none
		type(Trap), intent(in) :: this
		character (len=10) :: new_trap_type
		
		! Set the type of the trap
		this%trap_type = new_trap_type
	end subroutine setTrapType
	
	! Return the type of the trap. 
	function getTrapType(this) result (trap_type)
		implicit none
		type(Trap), intent(in) :: this
		character (len=10) :: trap_type
		
		! Return the type of the trap
		trap_type = this%trap_type
	end function getTrapType
	
	! This function gets called when a player triggers a trap
	subroutine triggerTrap(this) 
		implicit none
		type(Trap), intent(in) :: this
		
		this%triggered = .true.
		call effectPlayer()
	end subroutine triggerTrap
	
	! This method effects the player once a trap is triggered
	subroutine effectPlayer() 
		implicit none
		if (trap_type == "damage") then
			! if condition is true then print the following 
			print*, "This is a damage trap." 
		else if (trap_type == "displace") then
			! if else if condition is true 
			print*, "This is a displacement trap." 
		else if(trap_type == "impair") then
			! if else if condition is true  
			print*, "This is an impair trap." 
		else
			! if none of the conditions is true 
			print*, "You stumble upon a dud trap. Whew, consider this your lucky day." 
		end if
	end subroutine effectPlayer
	
	
